//Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        /*ListNode *temp;
        ListNode *t=head;
        int l=0;
        while(t->next)
        {
            l=l+1;
            t=t->next;
        }
        t=head;
        for(int i=0; i<l/2; i++)
        {
            if(t==head)
            {
                temp=t->next;
                t->next=temp->next;
                temp->next=t;
                head=temp;
            }
            else
            {
                temp=t->next;
                t->next=temp->next;
                temp->next=t;
            }
            t=t->next;
        }
        return head;*/
        
        if(head == nullptr || head->next == nullptr)  // if(size linked list == 1 || == 0)
			return head;
			
		// swap node head and node head->next
		ListNode* p2 = head->next->next, *p1 = head->next;
		head->next = p2;
		p1->next = head;
		head = p1;
		
		// if you swap two nodes != head, you must have a node stand in front 
		ListNode* p = head->next; // p is a node stand in front p1 and p2
		while((p1 = p->next) != nullptr && (p2 = p->next->next) != nullptr) { // p1 and p2 is two nodes that are swaped
			//swap p1 and p2
			p->next = p2;
			p1->next = p2->next;
			p2->next = p1;
			
			// next value p
			p = p->next->next;
		}
		return head;
    }
};
