//You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        return addNodes(l1, l2, 0);
        }
    ListNode* addNodes(ListNode* l1, ListNode* l2, int carry)
    {
        if(!l1 && !l2 && carry==0) 
            return NULL;
        int a=0, b=0; 
        if(l1)
        { a=l1->val; }
        if(l2)
        { b=l2->val; }
        int value=a+b+carry; 
        ListNode *head=new ListNode(value%10);
        head->next=addNodes(l1? l1->next: NULL , l2?l2->next:NULL, value/10);
        return head;
    }
};
